import type { ITerminalProvider, TerminalProviderSeverity } from './ITerminalProvider';
/**
 * Options for {@link PrefixProxyTerminalProvider}.
 *
 * @beta
 */
export interface IPrefixProxyTerminalProviderOptions {
    /**
     * The {@link ITerminalProvider} that will be wrapped.
     */
    terminalProvider: ITerminalProvider;
    /**
     * The prefix that should be added to each line of output.
     */
    prefix: string;
}
/**
 * Wraps an existing {@link ITerminalProvider} that prefixes each line of output with a specified
 * prefix string.
 *
 * @beta
 */
export declare class PrefixProxyTerminalProvider implements ITerminalProvider {
    private _parentTerminalProvider;
    private _prefix;
    private _currentPrefix;
    private _newlineRegex;
    constructor(options: IPrefixProxyTerminalProviderOptions);
    /** @override */
    get supportsColor(): boolean;
    /** @override */
    get eolCharacter(): string;
    /** @override */
    write(data: string, severity: TerminalProviderSeverity): void;
}
//# sourceMappingURL=PrefixProxyTerminalProvider.d.ts.map